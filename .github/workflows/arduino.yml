name: Compile Sketches

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "workflow" ]
  pull_request:
    branches: [ "main", "workflow" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SKETCHES_REPORTS_PATH: reports
  SKETCHES_REPORTS_ARTIFACT_NAME: sketches-reports

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  compile_job:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fqbn:
          # # ATTinyCore BSP v2.x ...
          # # - ATTinyCore:avr:attinyx5:chip=85,clock=internal_8m,eesave=disable,softserial=txonly,bod=disable,millis=enabled

          # ATTinyCore BSP v1.x ...
          - ATTinyCore:avr:attinyx5:chip=85,LTO=enable,clock=8internal,eesave=disable,bod=disable,millis=enabled

          # Arduino AVR Boards
          - arduino:avr:uno                  # Arduino Uno
          - arduino:avr:nano                 # Arduino Nano

          # Arduino MegaAVR Boards
          - arduino:megaavr:uno2018          # Arduino Uno WiFi Rev2
          - arduino:megaavr:nona4809         # Arduino Nano Every

          # Arduino SAM Boards
          - arduino:sam:arduino_due_x_dbg    # Arduino Due (Programming Port)

          # Arduino SAMD Boards
          - arduino:samd:mkrzero             # Arduino MKRZERO
          - arduino:samd:nano_33_iot         # Arduino NANO 33 IoT

          # ESP8266 - Community-driven BSP support
          - esp8266:esp8266:generic              # Generic ESP8266 Module
          - esp8266:esp8266:esp8285              # Generic ESP8285 Module
          - esp8266:esp8266:espduino             # ESPDuino (ESP-13 Module)
          - esp8266:esp8266:espino               # ESPino (ESP-12 Module)
          - esp8266:esp8266:d1_mini              # LOLIN(WEMOS) D1 R2 & mini

          # Espressif ESP32 BSP
          - esp32:esp32:esp32                    # ESP32 Dev Module
          - esp32:esp32:esp32c3                  # ESP32C3 Dev Module
          - esp32:esp32:esp32s2                  # ESP32S2 Dev Module
          - esp32:esp32:esp32s3                  # ESP32S3 Dev Module

          # Arduino MBED-based devices
          # Temporarily disabled ... 
          # .../src/qdec.h:141:73: error: decltype cannot resolve address of overloaded function
          # typedef typename Internal::deduceArduinoPinType<decltype(digitalRead)>::type SIMPLEHACKS_PIN_TYPE;
          - arduino:mbed_edge:edge_control       # Arduino Edge Control
          - arduino:mbed_nano:nano33ble          # Arduino Nano 33 BLE
          - arduino:mbed_nano:nanorp2040connect  # Arduino Nano RP2040 Connect
          - arduino:mbed_portenta:envie_m7       # Arduino Portenta H7 (M7 core)
          - arduino:mbed_portenta:envie_m4       # Arduino Portenta H7 (M4 core)
          - arduino:mbed_rp2040:pico             # Raspberry Pi Pico
          - arduino:mbed_nicla:nicla_sense       # Nicla Sense ME
          - arduino:mbed_nicla:nicla_vision      # Nicla Vision

          # # The following boards are explicitly NOT supported:
          # # Arduino Portenta X8 -- Requires custom library SerialRPC to use serial
          # # Arduino PRIMO -- Compiler does not support C++11


    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Compile
        uses: arduino/compile-sketches@1edb1fde2dd10524d345c853e888f487459667aa # v1.0.1
        with:
          fqbn: ${{ matrix.fqbn }}
          platforms: |
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:avr
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:megaavr
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:sam
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:samd
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:mbed_edge
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:mbed_nano
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:mbed_portenta
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:mbed_rp2040
            - source-url: https://downloads.arduino.cc/packages/package_index.json
              name: arduino:mbed_nicla
            - source-url: http://arduino.esp8266.com/stable/package_esp8266com_index.json
              name: esp8266:esp8266
            - source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
              name: esp32:esp32
            - source-url: http://drazzy.com/package_drazzy.com_index.json
              name: ATTinyCore:avr

          # will automatically find sketches in subdirectories
          sketch-paths: examples
          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
          cli-version: latest
          enable-deltas-report: true
          enable-warnings-report: true

      - name: Upload sketches report as workflow artifact
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

  # When using a matrix to compile multiple boards,
  # it's necessary to use a separate job (with `needs`)
  # to ensure the artifacts were uploaded.
  report_job:
    needs: compile_job
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
    - run: echo "Runs only after all compilation succeeds / artifacts uploaded"
